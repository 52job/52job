<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.job52.dao.CandidateMapper" >

    <resultMap id="BaseResultMap" type="com.job52.model.Candidate" >
        <id column="jid" property="jid" jdbcType="VARCHAR" />
        <id column="pid" property="pid" jdbcType="VARCHAR" />
        <result column="rid" property="rid" jdbcType="VARCHAR" />
        <result column="descriptionte" property="descriptionte" jdbcType="LONGVARCHAR" />
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
        <result column="isRead" property="isread" jdbcType="INTEGER" />
    </resultMap>

    <sql id="Base_Column_List" >
        jid, pid, rid, descriptionte, create_time, isRead
    </sql>

    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="com.job52.model.CandidateKey" >
        select 
        <include refid="Base_Column_List" />
        from candidate
        where jid = #{jid,jdbcType=VARCHAR}
          and pid = #{pid,jdbcType=VARCHAR}
    </select>

    <delete id="deleteByPrimaryKey" parameterType="com.job52.model.CandidateKey" >
        delete from candidate
        where jid = #{jid,jdbcType=VARCHAR}
          and pid = #{pid,jdbcType=VARCHAR}
    </delete>

    <insert id="insert" parameterType="com.job52.model.Candidate" >
        insert into candidate (jid, pid, rid, 
            descriptionte, create_time, isRead
            )
        values (#{jid,jdbcType=VARCHAR}, #{pid,jdbcType=VARCHAR}, #{rid,jdbcType=VARCHAR}, 
            #{descriptionte,jdbcType=LONGVARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{isread,jdbcType=INTEGER}
            )
    </insert>

    <insert id="insertSelective" parameterType="com.job52.model.Candidate" >
        insert into candidate
        <trim prefix="(" suffix=")" suffixOverrides="," >
            <if test="jid != null" >
                jid,
            </if>
            <if test="pid != null" >
                pid,
            </if>
            <if test="rid != null" >
                rid,
            </if>
            <if test="descriptionte != null" >
                descriptionte,
            </if>
            <if test="createTime != null" >
                create_time,
            </if>
            <if test="isread != null" >
                isRead,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides="," >
            <if test="jid != null" >
                #{jid,jdbcType=VARCHAR},
            </if>
            <if test="pid != null" >
                #{pid,jdbcType=VARCHAR},
            </if>
            <if test="rid != null" >
                #{rid,jdbcType=VARCHAR},
            </if>
            <if test="descriptionte != null" >
                #{descriptionte,jdbcType=LONGVARCHAR},
            </if>
            <if test="createTime != null" >
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="isread != null" >
                #{isread,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>

    <update id="updateByPrimaryKeySelective" parameterType="com.job52.model.Candidate" >
        update candidate
        <set >
            <if test="rid != null" >
                rid = #{rid,jdbcType=VARCHAR},
            </if>
            <if test="descriptionte != null" >
                descriptionte = #{descriptionte,jdbcType=LONGVARCHAR},
            </if>
            <if test="createTime != null" >
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="isread != null" >
                isRead = #{isread,jdbcType=INTEGER},
            </if>
        </set>
        where jid = #{jid,jdbcType=VARCHAR}
          and pid = #{pid,jdbcType=VARCHAR}
    </update>

    <update id="updateByPrimaryKey" parameterType="com.job52.model.Candidate" >
        update candidate
        set rid = #{rid,jdbcType=VARCHAR},
            descriptionte = #{descriptionte,jdbcType=LONGVARCHAR},
            create_time = #{createTime,jdbcType=TIMESTAMP},
            isRead = #{isread,jdbcType=INTEGER}
        where jid = #{jid,jdbcType=VARCHAR}
          and pid = #{pid,jdbcType=VARCHAR}
    </update>
</mapper>